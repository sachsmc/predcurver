?F
?R
x <- rnorm(50)
sum(c(1:50)/50*x)
mean(x)
sum(x*c(1:50)/50)
library(predcurver)
risk <- runif(100)
predcurve(risk)
predcurve[,1]
predcurve.default <- function(risk, ...){
pd <- as.data.frame(cbind(1:length(risk)/length(risk), risk[order(risk)]))
colnames(pd) <- c("percentile", "risk")
class(pd) <- c("predcurve", "data.frame")
return(pd)
}
predcurve(risk)
ppev.predcurve <-  function(R, pl=.5, ph=.5){
theta <- sum(R[,1]*R[,2])
R.inv <- R[,2:1]
mesh1 <- c(0,R.inv[R.inv[,1] <= pl,1])
mesh2 <- c(R.inv[R.inv[,1] >= ph,1],1)
vvv1 <- mesh1[-length(mesh1)] + (mesh1[2:length(mesh1)] - mesh1[1:(length(mesh1)-1)])/2
vvv2 <- mesh2[-length(mesh2)] + (mesh2[2:length(mesh2)] - mesh2[1:(length(mesh2)-1)])/2
true.ppev <- (sum((vvv1 - theta)^2*(evalcdf(R.inv, mesh1[2:length(mesh1)]) -
evalcdf(R.inv, mesh1[1:(length(mesh1)-1)])))
+ sum((vvv2 - theta)^2*(evalcdf(R.inv,mesh2[2:length(mesh2)]) -
evalcdf(R.inv,mesh2[1:(length(mesh2)-1)]))))/(theta*(1-theta))
return(true.ppev)
}
R<-predcurve(risk)
ppev(R)
ppev.predcurve <-  function(R, pl=.5, ph=.5){
theta <- sum(R[,1]*R[,2])
R.inv <- R[,2:1]
mesh1 <- c(0,R.inv[R.inv[,1] <= pl,1])
mesh2 <- c(R.inv[R.inv[,1] >= ph,1],1)
vvv1 <- mesh1[-length(mesh1)] + (mesh1[2:length(mesh1)] - mesh1[1:(length(mesh1)-1)])/2
vvv2 <- mesh2[-length(mesh2)] + (mesh2[2:length(mesh2)] - mesh2[1:(length(mesh2)-1)])/2
true.ppev <- (sum((vvv1 - theta)^2*(evalcdf(R.inv, mesh1[2:length(mesh1)]) -
evalcdf(R.inv, mesh1[1:(length(mesh1)-1)])))
+ sum((vvv2 - theta)^2*(evalcdf(R.inv,mesh2[2:length(mesh2)]) -
evalcdf(R.inv,mesh2[1:(length(mesh2)-1)]))))/(theta*(1-theta))
return(true.ppev)
}
ppev(R)
class(R)
class(R) <- "predcurve"
ppev(R)
ppev(R)
library(predcurver)
R
R <- predcurve(risk)
ppev(R)
ppev(R, .2, .8)
ptg(R, .2, .8)
ptg(R)
R[,1]*R[,2]
sum(R[,1]*R[,2])
mean(risk)
R
1:101/101
?sort
library(predcurver)
ris
risk
ptg(R)
ptg(R, .2, .8)
ptg(R, .1, .9)
ptg(R, .5, .5)
mean(R[,2])
plot(R)
ptg(R, 1, 0)
ptg(R, .999, 0.001)
ptg <- function(R, vl = .5, vh = .5, ...){
theta <- mean(R[,2])
return(
(integrate(function(t) abs(evalcdf(R, t) - theta), 0, vl, ...)$value +
integrate(function(t) abs(evalcdf(R, t) - theta), vh, 1, ...)$value)/(2*(vl*theta + (1-vh)*(1-theta)))
)
}
ptg(R)
ptg(R, .2, .8)
.25/.5
ptg <- function(R, vl = .5, vh = .5, ...){
theta <- mean(R[,2])
return(
(integrate(function(t) abs(evalcdf(R, t) - theta), 0, vl, ...)$value +
integrate(function(t) abs(evalcdf(R, t) - theta), vh, 1, ...)$value)/((vl*theta + (1-vh)*(1-theta)))
)
}
ptg(R)
lines
plot(R, type = 'l')
print(R[seq(1, dim(R)[1], length.out = 20),])
print(R[seq(1, dim(R)[1], length.out = 10),])
print("######################")
print("-----------------------")
print(paste("Avg. risk: ", round(mean(R[,2]), 2)))
print.predcurve(R, ...){
print(R[seq(1, dim(R)[1], length.out = 10),])
print("---------------------")
print(paste("Avg. risk:", round(mean(R[,2]), 2)))
}
print.predcurve(R, ...){
print(R[seq(1, dim(R)[1], length.out = 10),])
print("---------------------")
print(paste("Avg. risk:", round(mean(R[,2]), 2)))
}
print.lm
print.predcurve(R, ...){
cat(R[seq(1, dim(R)[1], length.out = 10),])
cat("---------------------")
cat(paste("Avg. risk:", round(mean(R[,2]), 2)))
}
print.predcurve <- function(R, ...){
cat(R[seq(1, dim(R)[1], length.out = 10),])
cat("---------------------")
cat(paste("Avg. risk:", round(mean(R[,2]), 2)))
}
print(R)
print.predcurve <- function(R, ...){
print(R[seq(1, dim(R)[1], length.out = 10),])
print("---------------------")
print(paste("Avg. risk:", round(mean(R[,2]), 2)))
}
print(R)
R
R[,1]
print.lm
print.predcurve <- function(R, ...){
print.default(R[seq(1, dim(R)[1], length.out = 10),])
cat("---------------------\n")
print(paste("Avg. risk:", round(mean(R[,2]), 2)))
}
R
print.data.frame(R[seq(1, dim(R)[1], length.out = 10),])
print.predcurve <- function(R, ...){
print.data.frame(R[seq(1, dim(R)[1], length.out = 10),])
cat("---------------------\n")
print(paste("Avg. risk:", round(mean(R[,2]), 2)))
}
R
cat(paste("Avg. risk:", round(mean(R[,2]), 2)))
print.predcurve <- function(R, ...){
print.data.frame(R[seq(1, dim(R)[1], length.out = 10),])
cat("---------------------\n")
cat(paste("Avg. risk:", round(mean(R[,2]), 2)))
}
R
print.predcurve <- function(R, ...){
print.data.frame(R[seq(1, dim(R)[1], length.out = 10),])
cat("---------------------\n")
cat(paste("Avg. risk:", round(mean(R[,2]), 2)))
cat("\n No. Observations: ")
cat(dim(R)[1])
}
R
print.predcurve <- function(R, ...){
print.data.frame(R[seq(1, dim(R)[1], length.out = 10),])
cat("---------------------\n")
cat(paste("      Avg. risk:", round(mean(R[,2]), 2)))
cat("\n No. Observations: ")
cat(dim(R)[1])
}
R
?print.data.frame
print.predcurve <- function(R, ...){
print.data.frame(R[seq(1, dim(R)[1], length.out = 10),], digits = 2)
cat("-------------------------\n")
cat(paste("        Avg. risk:", round(mean(R[,2]), 2)))
cat("\n No. Observations: ")
cat(dim(R)[1])
}
R
library(predcurver)
?predcurve
vl <- .2
vh <- .8
R
vl <- .225
R$risk
R$risk < vl
max((1:length(R$risk))[R$risk < vl])
seq.l <- 1:max((1:length(R$risk))[R$risk < vl])
seq.l
abline(h = .5)
R
seq.l[length(seq.l):1]
seq.l <- 1:max((1:length(R$risk))[R$risk < vl])
gons.y <- c(rep(theta, length(seq.l)), R[seq.l[length(seq.l):1],1])
theta <- mean(R[,1])
gons.y <- c(rep(theta, length(seq.l)), R[seq.l[length(seq.l):1],1])
gons.x <- c(R[seq.l, 2], R[seq.l[length(seq.l):1],2])
polygons(gons.x, gons.y, border = NULL, col = "grey")
polygon(gons.x, gons.y, border = NULL, col = "grey")
plot(R, type = 'l')
R
plot(R$risk ~ R$percentile, type = 'l')
plot(R$risk ~ R$percentile, type = 's', ...)
seq.l <- 1:max((1:length(R$risk))[R$risk < vl])
gons.y <- c(rep(theta, length(seq.l)), R[seq.l[length(seq.l):1],1])
gons.x <- c(R[seq.l, 2], R[seq.l[length(seq.l):1],2])
polygon(gons.x, gons.y, border = NULL, col = "grey")
abline(h = theta, lty = 2)
gons.y
source('~/.active-rstudio-document', echo=TRUE)
evalcdf(R, vl)
pl <- evalcdf(R, vl)
seq.l <- 1:max((1:length(R$risk))[R$percentile < pl])
gons.y <- c(rep(theta, length(seq.l)), R[seq.l[length(seq.l):1],1])
gons.x <- c(R[seq.l, 2], R[seq.l[length(seq.l):1],2])
polygon(gons.x, gons.y, border = NA, col = "grey")
seq.l
R
gons.y <- c(rep(theta, length(seq.l)), R[seq.l[length(seq.l):1],2])
gons.x <- c(R[seq.l, 1], R[seq.l[length(seq.l):1],1])
polygon(gons.x, gons.y, border = NA, col = "grey")
plot(R$risk ~ R$percentile, type = 's', ...)
plot(R$risk ~ R$percentile, type = 's')
plot(R$risk ~ R$percentile, type = 'l')
pl <- evalcdf(R, vl)
seq.l <- 1:max((1:length(R$percentile))[R$percentile < pl])
gons.y <- c(rep(theta, length(seq.l)), R[seq.l[length(seq.l):1],2])
gons.x <- c(R[seq.l, 1], R[seq.l[length(seq.l):1],1])
polygon(gons.x, gons.y, border = NA, col = "grey")
abline(h = theta, lty = 2)
abline(h = vl)
pl <- evalcdf(R[,2:1], vl)
seq.l <- 1:max((1:length(R$percentile))[R$percentile < pl])
gons.y <- c(rep(theta, length(seq.l)), R[seq.l[length(seq.l):1],2])
gons.x <- c(R[seq.l, 1], R[seq.l[length(seq.l):1],1])
polygon(gons.x, gons.y, border = NA, col = "grey")
vh
ph <- evalcdf(R[,2:1], vh)
seq.l <- 1:max((1:length(R$percentile))[R$percentile > ph])
gons.y <- c(rep(theta, length(seq.l)), R[seq.l[length(seq.l):1],2])
gons.x <- c(R[seq.l, 1], R[seq.l[length(seq.l):1],1])
polygon(gons.x, gons.y, border = NA, col = "grey")
ph <- evalcdf(R[,2:1], vh)
seq.l <- 1:min((1:length(R$percentile))[R$percentile > ph])
gons.y <- c(rep(theta, length(seq.l)), R[seq.l[length(seq.l):1],2])
gons.x <- c(R[seq.l, 1], R[seq.l[length(seq.l):1],1])
polygon(gons.x, gons.y, border = NA, col = "grey")
plot(R$risk ~ R$percentile, type = 'l')
abline(h = theta, lty = 2)
ph <- evalcdf(R[,2:1], vh)
seq.l <- 1:min((1:length(R$percentile))[R$percentile > ph])
gons.y <- c(rep(theta, length(seq.l)), R[seq.l[length(seq.l):1],2])
gons.x <- c(R[seq.l, 1], R[seq.l[length(seq.l):1],1])
polygon(gons.x, gons.y, border = NA, col = "grey")
seq.l
seq.l <- min((1:length(R$percentile))[R$percentile > ph]):length(R$percentile)
gons.y <- c(rep(theta, length(seq.l)), R[seq.l[length(seq.l):1],2])
gons.x <- c(R[seq.l, 1], R[seq.l[length(seq.l):1],1])
polygon(gons.x, gons.y, border = NA, col = "grey")
R <- predcurve(runif(50))
library(predcurver)
R <- predcurve(runif(50))
summary(R)
summary.predcurve <- function(R, vl = NULL, vh = NULL, pl = NULL, ph = NULL, ...){
theta <- mean(R[,2])
if(!is.null(vl) & is.null(pl)) pl <- evalcdf(R[,2:1], vl)
if(!is.null(vh) & is.null(ph)) ph <- evalcdf(R[,2:1], vh)
if(is.null(vl) & !is.null(pl)) vl <- evalcdf(R, pl)
if(is.null(vh) & !is.null(ph)) vh <- evalcdf(R, ph)
if(is.null(vh) & is.null(vl) & is.null(ph) & is.null(pl)){
vh <- vl <- ph <- pl <- .5
}
print(R)
cat("\n thresholds: v = (", vl, ", ", vh, ") \n ")
cat("            p = (", pl, ", ", ph, ") \n ")
cat("pTG = ", round(ptg(R, vl, vh), 2), "\n")
cat("pPEV = ", round(ppev(R, pl, ph), 2), "\n")
}
summary(R)
?rbeta
R1 <- predcurve(rbeta(50, 1, 3))
R1
R
plot(R1)
R1
mean(R1[,2])
lines(R1)
lines(R)
plot(R)
lines(R1)
expit
R <- predcurve(pnorm(-1 + .5*rnorm(100)))
plot(R)
source('C:/Users/sachsmc/Downloads/predcurver/R/predcurver-plot.predcurve.R')
plot(R)
R1 <- predcurve(pnorm(-1 + 2.5*rnorm(100)))
lines(R1)
plot(R1)
R1[,1]
R[,1]
uniroot(function(alpha) mean(pnorm(alpha + 2.5*rnorm(100))) - .35, -10, 10)
uniroot(function(alpha) mean(pnorm(alpha + 2.5*rnorm(100))) - .35, c(-10, 10))
uniroot(function(alpha) mean(pnorm(alpha + .5*rnorm(100))) - .35, c(-10, 10))
R <- predcurve(pnorm(-.42 + .5*rnorm(100)))
R1 <- predcurve(pnorm(-.85 + 2.5*rnorm(100)))
plot(R1)
lines(R)
mean(R[,2])
mean(R1[,2])
R1 <- predcurve(pnorm(-.8534 + 2.5*rnorm(100)))
mean(R1[,2])
R1 <- predcurve(pnorm(-.86 + 2.5*rnorm(100)))
mean(R1[,2])
R1 <- predcurve(pnorm(-.88 + 2.5*rnorm(100)))
mean(R1[,2])
R2 <- R
nnn <- dim(R1)[1]
swap <- rbinom(nnn, 1, p = .5)
swap
vl
vl <- .2
vh <- .8
theta <- mean(R1[,2])
dptg.est <- ptg(R1, vl, vh) - ptg(R2, vl, vh)
dppev.est <- ppev(R1, pl, ph) - ppev(R2, pl, ph)
swapOne <- function(R1, R2, vl, vh, pl, ph){
nnn <- dim(R1)[1]
swap <- rbinom(nnn, 1, p = .5)
R1.swap <- R1
R2.swap <- R2
R1.swap[swap==1,2] <- R2[swap==1,2]
R2.swap[swap==1,2] <- R1[swap==1,2]
return(list(dptg = ptg(R1.swap, vl, vh) - ptg(R2.swap, vl, vh),
dppev = ppev(R1.swap, pl, ph) - ppev(R2.swap, pl, ph))
}
swapOne <- function(R1, R2, vl, vh, pl, ph){
nnn <- dim(R1)[1]
swap <- rbinom(nnn, 1, p = .5)
R1.swap <- R1
R2.swap <- R2
R1.swap[swap==1,2] <- R2[swap==1,2]
R2.swap[swap==1,2] <- R1[swap==1,2]
return(list(dptg = ptg(R1.swap, vl, vh) - ptg(R2.swap, vl, vh),
dppev = ppev(R1.swap, pl, ph) - ppev(R2.swap, pl, ph)))
}
D <- 200
pl <- .4
ph <- .9
res <- lapply(1:D, function(i) unlist(swapOne(R1, R2, vl, vh, pl, ph)))
res2 <- matrix(unlist(res), ncol = 2, byrow = T)
colnames(res2) <- c("dpTG", "dpPEV")
res2
sum(res2$dpTG < dptg.est)/D
res2 <- as.data.frame(matrix(unlist(res), ncol = 2, byrow = T))
colnames(res2) <- c("dpTG", "dpPEV")
sum(res2$dpTG < dptg.est)/D
sum(res2$dpPEV < dppev.est)/D
dppev.est <- ppev(R1, pl, ph) - ppev(R2, pl, ph)
dptg.est <- ptg(R1, vl, vh) - ptg(R2, vl, vh)
dptg.est
ptg(R1, vl, vh) - ptg(R2, vl, vh)
ptg(R2, vl, vh)
ptg(R1, vl, vh)
hist(res2$dpTG)
sum(res2$dpPEV < dppev.est)/D
sum(res2$dpTG < abs(dptg.est) | res2$dpTG > abs(dptg.est))/D
D <- 2000
res <- lapply(1:D, function(i) unlist(swapOne(R1, R2, vl, vh, pl, ph)))
res2 <- as.data.frame(matrix(unlist(res), ncol = 2, byrow = T))
colnames(res2) <- c("dpTG", "dpPEV")
ifelse(dptg.est < 0, sum(res2$dpTG < dptg.est)+1, sum(res2$dpTG > dptg.est)+1)/(D+1)
ifelse(dppev.est < 0, sum(res2$dpPEV < dppev.est)+1, sum(res2$dpPEV > dppev.est)+1)/(
+1)
hist(res2$dpPEV)
dppev.est
sum(res2$dpPEV > dppev.est)
ifelse(dppev.est < 0, sum(res2$dpPEV < dppev.est)+1, sum(res2$dpPEV > dppev.est)+1)/(D+1)
library(predcurver)
library(predcurver)
